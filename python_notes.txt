# Some helpful functions in Python:
1/. lst.index(some_elem) gives index of the element inside lst
2/. keys = set(list(dict1.keys()) + list(dict2.keys()))
3/. string.lower() # case insensitive
- Check upper: string.isupper() # return True / False ==> swap: string.lower() # return a string
- Check lower: string.islower() # return True / False ==> swap: string.upper() # return a string
- Others: string.isalpha(); string.isdigit()
4/. count (+left target) & (-right target) recursively: 
          return 1 + count_diff(strs[1:], str1, str2)
          return (-1) + count_diff(strs[1:], str1, str2)
5/. check values at odd and even indices recursively:
    ==> can check them simultaneously (i.e. check condition(lst[0]) and condition(lst[1]) at the same time)
6/. sorted(lst) # gives a sorted list
    sorted(string) # can also sort a string
7/. isalnum() # check both alpha + num
    Ex: "abc1" ==> True; "ab" ==> True
8/. Alignment
string.ljust(final_string_width, '-') ==> left aligned string of length final_string_width
>>> width = 20
>>> print 'HackerRank'.ljust(width,'-')
HackerRank----------  

Similarly,
>>> width = 20
>>> print 'HackerRank'.center(width,'-')
-----HackerRank-----

>>> width = 20
>>> print 'HackerRank'.rjust(width,'-')
----------HackerRank
9/. use of textwrap to truncate a sentence
import textwrap
wrapper = textwrap.TextWrapper(width=width_of_text)
word_lst = wrapper.wrap(text=input_string)
for w in word_lst:
    # do something
Ex:
input = "ABCDE", width = 3
==> output: ABC
            DE
10/. oct(num)[2:] # octal; hex(num)[2:] # hexa; bin(num)[2:] # binary
11/. import string
alphabet_list = list(string.ascii_lowercase) # list of lowercase ascii (['a', 'b', ...])
OR just do: alphabet="abcdefghijklmnopqrstuvwxyz"
12/. string = string.replace(old, new) # remember the assignment!!!
string = string.lower() # remember the assignment!
13/. all non-duplicate substrings of string:
all_substr = set([test_str[i:j] for i in range(len(test_str)) for j in range(i+1, len(test_str) + 1)])
https://www.geeksforgeeks.org/python-get-all-substrings-of-given-string/
14/. ++score will not remember its incremented value ==> should write "score += 1" for more clarity
15/. lst = list(map(int, input().split())) # separate input where spaces happen, and map each input element into an int,
turn everything into a list
16/. cartesian product:
from itertools import product
>>> print list(product([1,2,3],repeat = 2))
[(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3)]
>>>
>>> print list(product([1,2,3],[3,4]))
[(1, 3), (1, 4), (2, 3), (2, 4), (3, 3), (3, 4)]
>>>
>>> A = [[1,2,3],[3,4,5]]
>>> print list(product(*A))
[(1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 3), (3, 4), (3, 5)]
>>>
>>> B = [[1,2,3],[3,4,5],[7,8]]
>>> print list(product(*B))
[(1, 3, 7), (1, 3, 8), (1, 4, 7), (1, 4, 8), (1, 5, 7), (1, 5, 8), (2, 3, 7), (2, 3, 8), (2, 4, 7), (2, 4, 8), (2, 5, 7), (2, 5, 8), (3, 3, 7), (3, 3, 8), (3, 4, 7), (3, 4, 8), (3, 5, 7), (3, 5, 8)]
Ex:
cartesian_product = list(product(list(map(int, input().split())), 
list(map(int, input().split()))))
[print(e, end =" ") for e in cartesian_product] # print without newline
17/. collections.Counter() acts like a dictionary ==> can also do "dicts["key"] to get value
[Example from HackerRank]
>>> from collections import Counter
>>> 
>>> myList = [1,1,2,3,4,5,3,2,3,4,2,1,2,3]
>>> print Counter(myList)
Counter({2: 4, 3: 4, 1: 3, 4: 2, 5: 1})
>>>
>>> print Counter(myList).items()
[(1, 3), (2, 4), (3, 4), (4, 2), (5, 1)]
>>> 
>>> print Counter(myList).keys()
[1, 2, 3, 4, 5]
>>> 
>>> print Counter(myList).values()
[3, 4, 4, 2, 1]
18/. >>> from itertools import permutations
[Example from HackerRank]
>>> print permutations(['1','2','3'])
<itertools.permutations object at 0x02A45210>
>>> 
>>> print list(permutations(['1','2','3']))
[('1', '2', '3'), ('1', '3', '2'), ('2', '1', '3'), ('2', '3', '1'), ('3', '1', '2'), ('3', '2', '1')]
>>> 
>>> print list(permutations(['1','2','3'],2))
[('1', '2'), ('1', '3'), ('2', '1'), ('2', '3'), ('3', '1'), ('3', '2')]
>>>
>>> print list(permutations('abc',3))
[('a', 'b', 'c'), ('a', 'c', 'b'), ('b', 'a', 'c'), ('b', 'c', 'a'), ('c', 'a', 'b'), ('c', 'b', 'a')]
19/. import copy
obj2 = copy.copy(obj1) # can copy one object into another; obj1 and obj2 have same data, but are diff obj.
>>> obj1 is obj2 # False
>>> obj1 == obj2 # False. Both "is" and "==" check object identity not obj equivalence
Note: if some other object is embedded inside obj1, when doing copy.copy(obj1), that embedded object will
be the same for obj2; for ex: >>> obj2.corner is obj1.corner # True
20/. otherwise, do deepcopy
>>> obj2 = copy.deepcopy(obj1) # now >>> obj2.corner is obj1.corner # False
21/. hasattr(point, 'attribute_name')
22/. print((numpy.zeros(inputs, dtype = numpy.int)))
inputs = list of dimensions
ex: inputs = [3,2,1] ==> 3 big elements, inside the big element: 2 smaller elems, inside each smaller elems is 1 smallest.
[         [[0],[0]],          [[0],[0]],          [[0],[0]] ]
24/. reverse numpy arr is same as lst
numpy.array(arr[::-1],float)
25/. work with sets: https://www.hackerrank.com/challenges/symmetric-difference/problem
set1.update(set2) # change set1 = set1 + set2
set1.difference(set2) # {elements} from set1 that are not in set2
...
